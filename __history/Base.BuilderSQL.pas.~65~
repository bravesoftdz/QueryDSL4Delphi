unit Base.BuilderSQL;

interface

uses
  Base.Collections, System.SysUtils, Base.Utils;

type
  IBuilderSQL = interface ['{164FDB1F-5365-4AE7-8253-8D6789C395DE}']
    function AddTable( const ATable: string ): IBuilderSQL;
    function AddField( const AField: string; const AValue: Variant ): IBuilderSQL;

    function AddWhere( const AField: string; const AValue: Variant;
      const AOperatorComparison: TOperatorComparison ): IBuilderSQL;

    function AddWhereAnd( const AField: string; const AValue: Variant;
      const AOperatorComparison: TOperatorComparison ): IBuilderSQL;

    function AddWhereOr( const AField: string; const AValue: Variant;
      const AOperatorComparison: TOperatorComparison ): IBuilderSQL;


    function GetSQL(): string;
  end;

  TBuilderSQL = class ( TInterfacedObject, IBuilderSQL )
  strict protected
    Table: string;
    Fields: TCollectionsSQL;

    Wheres: TCollectionsSQL;
  public
    function AddTable( const ATable: string ): IBuilderSQL;

    function AddField( const AField: string; const AValue: Variant ): IBuilderSQL;

    function AddWhere( const AField: string; const AValue: Variant;
      const AOperatorComparison: TOperatorComparison ): IBuilderSQL;
   
    function GetSQL(): string; virtual;
  end;

implementation

function TBuilderSQL.AddTable(const ATable: string): IBuilderSQL;
begin
  Table:= ATable;

  Result:= Self ;
end;



function TBuilderSQL.AddWhere(const AField: string;
  const AValue: Variant;
  const AOperatorComparison: TOperatorComparison; const AOperatorLogical : TOperatorLogical): IBuilderSQL;
begin
  Wheres.Add( EmptyStr, AField, AValue, AOperatorComparison, AOperatorLogical );

  Result:= Self;
end;

function TBuilderSQL.AddField(const AField: string;
  const AValue: Variant): IBuilderSQL;
begin
 Fields.Add( EmptyStr, AField, AValue );

 Result:= Self;
end;



function TBuilderSQL.GetSQL: string;
begin
  //raise Exception.Create('Função não implementada');
end;



end.
