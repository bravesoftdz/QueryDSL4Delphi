unit Base.BuilderSQL.Utils;

interface

uses
 Base.Collections;


implementation

  function GetFields( const ACollectionsSQL: TCollectionsSQL ): string;
  var
    Indice: Integer;
  begin
    Result:= EmptyStr;

    for Indice := Low( Fields.Collection ) to High( Fields.Collection ) do
      Result:= Result + IfThen( Indice > 0, ', ' ) + Fields.Collection[Indice].Field +
        ' = ' + VariantToString ( Fields.Collection[Indice].Value );
  end;

  function GetWheres(): string;

    function GetWhere(): string;
    var
      Indice: Integer;
    begin
      for Indice := Low( Wheres.Collection ) to High( Wheres.Collection ) do
        Result:= Result + IfThen( Indice > 0, Wheres.LogicalAsText( Wheres.Collection[Indice].OperatorLogical ) ) + Wheres.Collection[Indice].Field +
          Wheres.ComparisonAsText( Wheres.Collection[Indice].OperatorComparison ) + VariantToString ( Wheres.Collection[Indice].Value );
    end;

  begin
    Result:= EmptyStr;

    if ( not ( Wheres.IsEmpty ) ) then
    begin
      Result:= ' where ' + GetWhere()
    end;

  end;


end.
