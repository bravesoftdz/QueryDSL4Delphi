unit Base.BuilderSQL.Insert;

interface

uses
  Base.Utils,
  Base.BuilderSQL,
  System.StrUtils,
  System.SysUtils;

type
  TInsertSQL = class( TBuilderSQL )
    function GetSQL(): string;  override;
    class function Builder(): TBuilderSQL;
  end;


implementation


class function TInsertSQL.Builder: TBuilderSQL;
begin
  Result:= TInsertSQL.Create();
end;



function TInsertSQL.GetSQL: string;

  function GetFields( ): string;
  var
    Indice: Integer;
  begin
    Result:= EmptyStr;
    for Indice := Low( Fields.Collection ) to High(  Fields.Collection ) do
      Result:= Result + IfThen( Indice > 0, ', ' ) + Fields.Collection[Indice].Field  ;
  end;


function GetFieldsValues( ): string;
var
  Indice: Integer;
begin
  Result:= EmptyStr;
  for Indice := Low( ACollectionsSQL.Collection ) to High(  ACollectionsSQL.Collection ) do
    Result:= Result + IfThen( Indice > 0, ', ' ) + VariantToString ( ACollectionsSQL.Collection[Indice].Value );
end;

begin
  Result:=
    'insert into ' + Table + ' ( ' +

     GetFields( Fields ) +

    ' ) values ( ' +

    GetFieldsValues( Fields ) +

    ' )';
end;


end.
