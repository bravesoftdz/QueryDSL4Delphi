unit Base.BuilderSQL.Utils;

interface

uses
 Base.Utils,
 Base.Collections;


implementation

uses
  System.SysUtils, System.StrUtils;

  function GetFields( const ACollectionsSQL: TCollectionsSQL ): string;
  var
    Indice: Integer;
  begin
    Result:= EmptyStr;

    for Indice := Low( ACollectionsSQL.Collection ) to High( ACollectionsSQL.Collection ) do
      Result:= Result + IfThen( Indice > 0, ', ' ) + ACollectionsSQL.Collection[Indice].Field +
        ' = ' + VariantToString ( ACollectionsSQL.Collection[Indice].Value );
  end;

  function GetWheres( const ACollectionsSQL: TCollectionsSQL ): string;

    function GetWhere(): string;
    var
      Indice: Integer;
    begin
      for Indice := Low( ACollectionsSQL.Collection ) to High( ACollectionsSQL.Collection ) do
        Result:= Result + IfThen( Indice > 0, ACollectionsSQL.LogicalAsText( ACollectionsSQL.Collection[Indice].OperatorLogical ) ) + Wheres.Collection[Indice].Field +
          ACollectionsSQL.ComparisonAsText( ACollectionsSQL.Collection[Indice].OperatorComparison ) + VariantToString ( Wheres.Collection[Indice].Value );
    end;

  begin
    Result:= EmptyStr;

    if ( not ( ACollectionsSQL.IsEmpty ) ) then
    begin
      Result:= ' where ' + GetWhere()
    end;

  end;


end.
